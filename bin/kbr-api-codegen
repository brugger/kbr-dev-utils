#!/usr/bin/env python3


import argparse
from distutils import file_util
import sys
import os
import re

from jinja2 import Template

from kbr import config_utils

import kbr.args_utils as args_utils
import kbr.version_utils as version_utils
import kbr.dbase.postgres_utils as postgres_utils
import kbr.os_utils as os_utils
import kbr.file_utils as file_utils

version = version_utils.as_string('kbr')

db = None

acl_facade_template = """

    def user_acls(self, user_profile_id:str) -> list:

        roles = self.user_roles( user_profile_id=user_profile_id )
        acls = {}
        for role in roles:
            acl_roles = self.acl_roles( role_id=role['role_id'])

            for acl_role in acl_roles:
                acl_id = acl_role[ 'acl_id' ]
                acl = self.acl(id=acl_id)
                endpoint = acl[ 'endpoint' ]

                if endpoint not in acls:
                    acls[ endpoint ] = {'can_create': acl['can_create'],
                                        'can_read':acl['can_read'],
                                        'can_update':acl['can_update'],
                                        'can_delete':acl['can_delete'],
                                        }
                else:
                    acls[endpoint]['can_create'] = acls[endpoint]['can_create'] or acl['can_create']
                    acls[endpoint]['can_read']   = acls[endpoint]['can_read'] or acl['can_read']
                    acls[endpoint]['can_update'] = acls[endpoint]['can_update'] or acl['can_update']
                    acls[endpoint]['can_delete'] = acls[endpoint]['can_delete'] or acl['can_delete']


        return acls

"""


acl_schema_template = """
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";

CREATE TABLE IF NOT EXISTS user_profile (
   id  UUID NOT NULL DEFAULT  uuid_generate_v4 () PRIMARY KEY,
   idp_user_id UUID NOT NULL,
   email varchar(200),
   username varchar( 200 ),
   superuser boolean NOT NULL default False,
   create_date timestamp default now(),
   last_login timestamp
);

CREATE TABLE IF NOT EXISTS acl (
    id UUID NOT NULL DEFAULT  uuid_generate_v4 () PRIMARY KEY,
    endpoint varchar(50) NOT NULL ,
    can_create boolean default FALSE,
    can_read   boolean default False,
    can_update boolean default False,
    can_delete boolean default False
);

CREATE TABLE IF NOT EXISTS role (
    id  UUID NOT NULL DEFAULT  uuid_generate_v4 () PRIMARY KEY,
    name varchar( 200 ) UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS user_role (
   id  UUID NOT NULL DEFAULT  uuid_generate_v4 () PRIMARY KEY,
   user_profile_id UUID NOT NULL references user_profile( id ),
   role_id UUID NOT NULL references role( id )
);

CREATE TABLE IF NOT EXISTS acl_role (
    id  UUID NOT NULL DEFAULT  uuid_generate_v4 () PRIMARY KEY,
    role_id UUID NOT NULL references role( id ),
    acl_id UUID NOT NULL references acl( id )
);

"""



api_template = """##### {{tblname}} #####

    def {{tblname}}_create(self{{required_args|join(', ')}}, **values) -> dict:
{% for param in required_params %}
        values['{{param}}'] = {{param}}{% endfor %}

        p = self._db.add('{{tblname}}', values)

        return self._db.get('{{tblname}}', **values)

{% if required_params|length == 1 %}
    def {{tblname}}_create_unique(self{{ required_args|join(', ') }}, **values) -> dict:
{% for param in required_params %}
        values['{{param}}'] = {{param}}{% endfor %}

        return self._db.add_unique('{{tblname}}', values, {{required_params}})

{% endif %}
    def {{tblname}}(self, id:str) -> dict:
        return self._db.get_by_id('{{tblname}}', id)

    def {{tblname}}s(self, **values) -> dict:
        return self._db.get('{{tblname}}', **values)

    def {{tblname}}_update(self, **values) -> dict:
        self._db.update('{{tblname}}', values, {'id': values['id']})

    def {{tblname}}_delete(self, id) -> None:
        self._db.delete('{{tblname}}', id=id)

    def {{tblname}}_purge(self) -> None:
        self._db.purge('{{tblname}}')

"""

cli_template = """

def {{tblname}}_cmd(args) -> None:

    commands = {'c':'create', 's':'show', 'l':'list', 'u':'update', 'd': 'delete', 'p':'purge', 'h':'help'}

    if len(args) == 0:
        args.append('help')

    command = args.pop(0)
    command = args_utils.valid_command(command, commands)

    if command == 'create':
        data = {}
{% for param in required%}
        data['{{param}}'] = args_utils.get_or_fail(args, "Missing {{param}}"){% endfor %}
{% for param in optional%}
        data['{{param}}'] = args_utils.get_or_default(args, None){% endfor %}

        db.{{tblname}}_create(**data)
#        db.{{tblname}}_create({{params|join(', ')}})

    elif command == 'show':
        id = args_utils.get_or_fail(args, "Missing {{tblname}} id")
        entry = db.{{tblname}}(id)
        print( tabulate(entry, headers={}, tablefmt='psql'))

    elif command == 'list':
        {{tblname}}s = db.{{tblname}}s()
        print( tabulate({{tblname}}s, headers={}, tablefmt='psql'))

    elif command == 'update':
        id = args_utils.get_or_fail(args, "Missing {{tblname}} id")
        data = args_utils.named_args( args )
        data['id'] = id
        del data['rest']

        db.{{tblname}}_update(**data)

    elif command == 'delete':
        id = args_utils.get_or_fail(args, "Missing {{tblname}} id")
        db.{{tblname}}_delete(id)
    elif command == 'purge':
        db.{{tblname}}_purge()

    else:
        print("Help:")
        print("-----------------")
        print("{{tblname}} list")
        print("{{tblname}} create {% for r in required %}[{{r}}] {% endfor %}{% for r in optional %}<{{r}}> {% endfor %}")
        print("{{tblname}} show [id]")
        print("{{tblname}} update [id] {% for r in required+optional %}{{r}}:{{r}} {% endfor %} ")
        print("{{tblname}} delete [id]")
        print("{{tblname}} purge")
        sys.exit()

"""

rest_template = """

class {{tblname_camelcase}}DetailHandler ( tornado.BaseHandler ):

    def endpoint(self):
        return("/{{tblname}}/[id]")

    def get(self, id:str):
        {{tblname}}  = db.{{tblname}}(id=id)
        if {{tblname}} is None:
            self.send_response_404()

        return self.send_response( data={{tblname}})

    def patch(self, id:str):
        {{tblname}} = db.{{tblname}}(id=id)
        if {{tblname}} is None:
            self.send_response_404()

        values = self.post_values()
        # Check and change here!
        self.valid_arguments(values, [{{table_fields|join(", ")}}])
        values['id'] = id

        db.{{tblname}}_update(**values)
        return self.send_response_200( )

    def delete(self, id:str):
        try:
            db.{{tblname}}_delete( id=id )
            return self.send_response_200()
        except:
            return self.send_response_400()

    def options(self, id:str):
        self.allow_options()


class {{tblname_camelcase}}sListHandler( tornado.BaseHandler):
    def endpoint(self):
        return "/{{tblname}}s/"

    def post(self):
        values = self.post_values()
        # check and change here
        self.require_arguments(values, [{{table_required_fields|join(', ')}}])
        self.valid_arguments(values, [{{table_fields|join(', ')}}])
        try:
            db.{{tblname}}_create(**values)
            self.send_response_200()
        except Exception as e:
            logger.error(f"Request export tracking error {e}")
            self.send_response_404()

    def options(self):
        self.allow_options()

    def get(self):
        filter = self.arguments()
        # check and change here
        self.valid_arguments(filter, [{{table_fields|join(', ')}}])
        return self.send_response( db.{{tblname}}s( **filter ))

"""

rest_file_template = """#!/usr/bin/env python

''' REST API for {{project}}'''

import argparse

import kbr.log_utils as logger
import kbr.config_utils as config_utils
import kbr.version_utils as version_utils

#import kbr_api.auth     as oauth
import kbr.tornado   as tornado

import {{project}}.facade as {{project}}_db


db = None
version = version_utils.as_string()

class RootHandler ( tornado.BaseHandler ):

    def endpoint(self):
        return("/")

    def get(self):
        return self.send_response(data={"name":"{{project}}-api", "version":version})


{{handlers}}

def main():
    parser = argparse.ArgumentParser(description='{{project}}-api: the rest service for {{project}}')


    parser.add_argument('-c', '--config', default="api.json", help="config file, can be overridden by parameters")

    parser.add_argument('-l', '--logfile', default=None, help="Logfile to write to, default is stdout")
    parser.add_argument('-p', '--port', help="Port to bind to")
    parser.add_argument('-v', '--verbose', default=4, action="count",  help="Increase the verbosity of logging output")

    args = parser.parse_args()

    config = config_utils.readin_config_file( args.config )

    if args.port:
        config.server.port = args.port

    if args.logfile:
        config.logfile = args.logfile
        if args.logfile == 'stdout':
            config.logfile = None

    logger.init(name=config.name, log_file=config.logfile )
    logger.set_log_level( args.verbose )

    if 'database' in config:
        global db
        db = {{project}}_db.DB()
        db.connect( config.database )

    urls = [('/', RootHandler),
{% for table in tables %}    
            (r'/{{table}}/(\w+)/?$',  {{table_camelcase}}DetailHandler),
            (r'/{{table}}s/?$',         {{table_camelcase}}sListHandler),{%endfor%}

            ]# + oauth.init( **config.oauth )

    logger.info(f'Startup {{project}}-api (v:{version})')
    logger.info(f"Running on port: {config['server'].get('port', 8080)}")


    tornado.run_app( urls, **config.server )

if __name__ == "__main__":
    main()
"""



def cli_blueprint(project:str, tables:list) -> None:

    blueprint_template = """#!/usr/bin/env python3
import argparse
import os
import sys
import csv
import json

sys.path.append(".")

from tabulate import tabulate

from kbr import config_utils
import kbr.crypt_utils as crypt_utils
import kbr.args_utils as args_utils
import kbr.json_utils as json_utils
import kbr.type_utils as type_utils

import {{project}}.facade as {{project}}_db

def config_cmd(args, config_file:str='api.json', force:bool=False) -> None:
    commands = {'c':'create', 'p':'print', 'h':'help'}
    if len(args) == 0:
        args.append('help')

    command = args.pop(0)
    command = args_utils.valid_command(command, commands)

    if command == 'create':
        
        dbname   = args_utils.get_or_fail(args, "database name missing")
        username = args_utils.get_or_default(args, dbname)
        password = args_utils.get_or_default(args, crypt_utils.create_password())
        host     = args_utils.get_or_default(args, "localhost")

        config = {"name": f"{dbname}-api",
                  "database": f"postgresql://{username}:{password}@{host}/{dbname}",
                  "logfile": "api.log",
                  "server": {
                      "port": 8080,
                      "template_path": "templates",
                      "debug": False
                   }
                  }

        if not os.path.isfile(config_file) or force:
           json_utils.write(config_file, config)
        else:
            print(f"Cannot overwrite {config_file}")
            sys.exit(-1)


    elif command == 'print':
        config = dict(config_utils.readin_config_file(config_file))
        print( json.dumps(config, indent=2))
    else:
        print("Help:")
        print("==========================")
        print("config print")
        print("config create  <dbname> [dbuser] [dbpasswd]")
        print("utils help")

        sys.exit(1)



def utils_cmd(args) -> None:
    commands = {'i':'import', 'e':'export', 'h':'help'}

    if len(args.command) == 0:
        args.command.append('help')

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)

    if command == 'import':
        print('Not implemented yet...')
    elif command == 'export':
        print('Not implemented yet...')
    else:
        print("utils: {}".format(args_utils.pretty_commands(commands)))
        sys.exit()


def table_cmd(args) -> None:
    commands = { {%for t in tables%}'{{t[0]}}':'{{t}}',{% endfor %} 'h':'help'}

    if len(args.command) == 0:
        args.command.append('help')

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)
    {% set ns = namespace(else_if='') %}
    {% for table in tables%}
    {{ns.else_if}}if command == '{{table}}':
        {{table}}_cmd(args.command)
        {% set ns.else_if = 'el' %}{%endfor%}
    else:
        print("table: {}".format(args_utils.pretty_commands(commands)))
        sys.exit()

{{cmds}}




def main():

    commands = {'u':'utils', 't':'table', 'c':'config', 'h':'help'}

    parser = argparse.ArgumentParser(description='{project}-cli tool')
    parser.add_argument('-c', '--config', default="api.json", help="config file, can be overridden by parameters")
    parser.add_argument('-f', '--force', default=False, action="store_true", help="overwrite files if exists")
    parser.add_argument('-i', '--ids', default=False, action="store_true", help="Only output IDs on lists")
    parser.add_argument('command', nargs='*', help="{}".format(",".join(commands.values())))

    args = parser.parse_args()

    args_utils.min_count(1, len(args.command),
                         msg="{{project}}-cli takes one of the following commands: {}".format(args_utils.pretty_commands(commands)))


    if len(args.command) == 0:
        args.command.append('help')

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)

    if command == 'config':
        config_cmd(args.command, args.config, args.force)
        sys.exit()

    args.config = config_utils.readin_config_file( args.config )

    global db
    db = {{project}}_db.DB()
    db.connect( args.config.database )

    if command == 'utils':
        utils_cmd(args)
    elif command == 'table':
        table_cmd(args)
    elif command == 'help':
        parser.print_help()
        sys.exit(1)


if __name__ == "__main__":
    main()


"""

    template = Template(blueprint_template)

    cmds = ""
    for tblname in tables:
        tbl = db.table_details(tblname)
        cmds += cli_for_table(tblname, tbl)

    return template.render({'tables': tables, 'cmds':cmds, 'project': project})


def print_cli_blueprint(project:str, tables:list) -> None:
    print( cli_blueprint(project, tables) )



def rest_blueprint(project:str, tables:list) -> str:

    template = Template(rest_file_template)

    handlers = ""
    for tblname in tables:
        tbl = db.table_details(tblname)
        handlers += rest_for_table(tblname, tbl)

    return template.render({'project':project, 'tables': tables, 'handlers':handlers})

def print_rest_blueprint(project:str, tables:list) -> None:
    print( rest_blueprint(project, tables))

def api_for_table(tblname:str, tbl:list) -> None:

    required_args = [""]
    required_params = []
    for row in tbl:
        if row['is_nullable'] == 'NO' and row['column_name'] != 'id':
            required_args.append( f"{row['column_name']}:{to_python_type(row['data_type'])}")
            required_params.append( row['column_name'])


    template = Template(api_template)
    return template.render({'tblname': tblname, 'required_args':required_args, 'required_params': required_params})


def api_blueprint(tables:list=[]) -> str:

    blueprint_template = """
import kbr.db_utils as db

class DB(object):

    def connect(self, url: str) -> None:
        self._db = db.DB(url)

    def disconnect(self) -> None:

        if self._db is not None:
            self._db.close()
"""

    api_for_tables = ""
    for tblname in tables:
        tbl = db.table_details(tblname)
        api_for_tables += api_for_table(tblname, tbl)

    return blueprint_template + api_for_tables


def rest_for_table(tblname:str, tbl:list) -> str:

    fields_required = []
    fields = []
    for row in tbl:
        if row['is_nullable'] == 'NO' and row['column_name'] != 'id':
            fields_required.append(f"'{row['column_name']}'")
        
        fields.append(f"'{row['column_name']}'")

    template = Template(rest_template)
    return template.render({'tblname': tblname, 'table_fields':fields, 'table_required_fields': fields_required, 'tblname_camelcase': snake2CamelCase(tblname)})



def print_rest_for_table(tblname:str, tbl:list) -> None:
    print( rest_for_table(tblname, tbl))


def cli_for_table(tblname:str, tbl:list) -> str:

    required = []
    optional  = []
    params = []
    for row in tbl:
        name = row['column_name']
        if name == 'id':
            continue
        params.append(f"{name}={name}")
        if row['is_nullable'] == 'NO':
            required.append( name)
        else:
            optional.append( name)

    template = Template(cli_template)
    return template.render({'tblname': tblname, 'required': required, 'optional': optional, 'params':params})


def print_cli_for_table(tblname:str, tbl:list) -> None:
    print( cli_for_table(tblname, tbl))


def facade_blueprint(project:str) -> str:
    return f"""
import {project}.db as db

class DB(db.DB):

    def new_function() -> None:
        print("Add fancy facade stuff here...")
        return
"""



def snake2CamelCase(name):
    return re.sub(r'(?:^|_)([a-z])', lambda x: x.group(1).upper(), name)

def snake2minus(name):
    return re.sub('_', '-', name)



def to_python_type(dtype:str) -> str:
    if dtype == 'integer':
        return "int"
    if 'precision' in dtype:
        return "float"
    elif dtype == 'boolean':
        return "bool"
    elif dtype in ['uuid', 'text']:
        return "str"
    elif "character" in dtype:
        return "str"
    else:
        return "any"


def read_config(config_file) -> dict:
    try:

        config = config_utils.readin_config_file(config_file)
        return config
    except Exception as e :
#        print (e)
        print("Error:")
        print(f"{config_file}, does not exit\n")        
        print("Howto create:\nsudo -u postgres psql")
        print("CREATE USER <ADMIN> WITH SUPERUSER PASSWORD '<PASSWORD>';")
        print('{"admin_dbase": "postgresql://<ADMIN>:<PASSWORD>@localhost/"}')
        sys.exit()


def find_share_dir() -> str:

    path = "/".join([sys.prefix, "share", "kbr-tools"])
    if os.path.exists(path):
        return path

    script = f"{__file__}"
    path = "/".join([os_utils.file_dir(script), "..","share"])
    if os.path.exists(path):
        return path


    raise RuntimeError('path to share/kbr-tools not found!')


def main():

    parser = argparse.ArgumentParser(description="kbr dev utils (version: {version})".format(version=version))
    commands = {'a': 'api', 'f': 'facade', 'c': 'cli', 'r':'rest', 'as':'acl_schema', 'aa': 'acl_api', 'af': 'acl_facade', 'ac':'acl_cli', 'b':'bootstrap', 'h':'help'}
    parser.add_argument('-c', '--config-file', default=[os.getenv("HOME") + "/.kbr_dev_utils.json"], help="output facade of api-file", nargs=1)
    parser.add_argument('-p', '--project-name', help="project name (if differs from database name!)")
    parser.add_argument('-f', '--force', default=False, help="overwrite files", action="store_true")
    parser.add_argument('-A', '--all-tables', default=False, help="all tables in database", action="store_true")
    parser.add_argument('command', nargs='+', help="List of tables to make api code for")

    args = parser.parse_args()

    config = read_config(args.config_file[0])

    command = args.command.pop(0)
    if command in commands:
        command = commands[ command ]

    command = args_utils.valid_command(command, commands)


    if command == 'help':
        print("Help")
        print("blueprint: full file output for api/cli/rest/facade")
        print("=======")
        print("api [dbase-name] <blueprint> <tables or -A>")
        print("cli [dbase-name] <blueprint> <tables or -A>")
        print("rest [dbase-name] <blueprint> <tables or -A>")
        print("facade [project-name]")
        print("acl_schema")
        print("acl_api [dbase-name]")
        print("acl_facade")
        print("acl_cli")
        print("bootstrap <--force> [dbname-name] <tables, otherwise all will be used>")
        print("")
        sys.exit()



    global db

    if command == 'facade':
        pname = args_utils.get_or_fail(args.command, "project name is missing")
        print(facade_blueprint( pname ))
    elif command == 'acl_schema':
            print(acl_schema_template)
            sys.exit()
    elif command == 'acl_facade':
            print(acl_facade_template)
            sys.exit()
    elif command == 'acl_cli':
            share_path = find_share_dir()
            template = file_utils.read(f"{share_path}/templates/kbr-auth-cli")
            print(template.format(project=args.project_name))
            sys.exit()
    elif command == 'bootstrap':
        dbname = args_utils.get_or_fail(args.command, "Missing database name")
        db = postgres_utils.DB(config['admin_dbase']+dbname)

        project_name = dbname
        if args.project_name is not None:
            project_name = args.project_name

        if args.command == []:
            args.command +=  [ v['tablename'] for v in db.tables_list()]

        os.makedirs(project_name, exist_ok = True, mode=0o755,  )
        os.makedirs("bin", exist_ok = True, mode=0o755)

        if not os.path.isfile(f"bin/{project_name}-cli") or args.force:
            fh = open(f"bin/{project_name}-cli", 'w')
            fh.write( cli_blueprint(project_name, args.command ))
            fh.close()
            os.chmod(f"bin/{project_name}-cli", 0o755)

        if not os.path.isfile(f"bin/{project_name}-api.py") or args.force:
            fh = open(f"bin/{project_name}-api.py", 'w')
            fh.write( rest_blueprint(project_name, args.command ))
            fh.close()
            os.chmod(f"bin/{project_name}-api.py", 0o755)

        if not os.path.isfile(f"{project_name}/db.py") or args.force:
            fh = open(f"{project_name}/db.py", 'w')
            fh.write( api_blueprint(args.command))
            fh.close()

        if not os.path.isfile(f"{project_name}/facade.py") or args.force:
            fh = open(f"{project_name}/facade.py", 'w')
            fh.write( facade_blueprint(project_name))
            fh.close()

        if not os.path.isfile("requirements.txt") or args.force:
            fh = open(f"requirements.txt", 'w')
            fh.write("kbr@git+https://github.com/brugger/kbr-tools.git@2_0\n")
            fh.write("records@git+https://github.com/brugger/records.git\n")
            fh.write("kbr-tornado@git+https://github.com/brugger/kbr-tools-tornado.git\n")
            fh.write("kbr-dbase@git+https://github.com/brugger/kbr-tools-dbase.git\n")
            fh.close()

        if not os.path.isfile("version.json") or args.force:
            fh = open(f"version.json", 'w')
            fh.write('{"major": 0, "minor": 0, "patch": 0}')
            fh.close()


        sys.exit()


    elif command in ['api', 'cli', 'rest', 'acl_api']:
        dbname = args_utils.get_or_fail(args.command, "Missing database name")

        if args.project_name is None:
            args.project_name = dbname

        db = postgres_utils.DB(config['admin_dbase']+dbname)

        if args.all_tables: 
            args.command +=  [ v['tablename'] for v in db.tables_list()]

        if command == 'acl_api':
            args.command = ['user_profile', 'acl', 'role', 'user_role', 'acl_role']
            if 'blueprint' in args.command:
                print(api_blueprint(args.command))
            else:
                for tblname in args.command:
                    tbl = db.table_details(tblname)
                    print(api_for_table(tblname, tbl))
            sys.exit()

        if command == 'api' and 'blueprint' in args.command:
            args.command.pop(args.command.index('blueprint'))
            print(api_blueprint(args.command))
            sys.exit()

        if command == 'cli' and 'blueprint' in args.command:
            args.command.pop(args.command.index('blueprint'))
            print_cli_blueprint(args.project_name, args.command)
            sys.exit()

        if command == 'rest' and 'blueprint' in args.command:
            args.command.pop(args.command.index('blueprint'))
            print_rest_blueprint(args.project_name, args.command)
            sys.exit()

        while len(args.command):

            tblname = args_utils.get_or_default(args.command, "Missing table name")
            tbl = db.table_details(tblname)
            if command == 'api':
                print(api_for_table(tblname, tbl))
            elif command == 'cli':
                print_cli_for_table(tblname, tbl)
            elif command == 'rest':
                print_rest_for_table(tblname, tbl)

    else:
        parser.print_help()
        sys.exit(1)


if __name__ == "__main__":
    main()
