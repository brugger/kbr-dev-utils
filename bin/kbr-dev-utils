#!/usr/bin/env python3
#
#
#
#
# Kim Brugger (03 Apr 2019), contact: kim@brugger.dk

import sys
import os
import pprint


pp = pprint.PrettyPrinter(indent=4)
import argparse

sys.path.append(".")
#sys.path.append("..")

import kbr.args_utils as args_utils
import kbr.version_utils as version_utils
import kbr.string_utils as string_utils
import kbr.crypt_utils as crypt_utils
import kbr.run_utils   as run_utils
import kbr.datetime_utils as datetime_utils
import kbr.os_utils as os_utils
import kbr.git_utils as git_utils

version = version_utils.as_string('kbr')


def version_command(args) -> None:
#    commands = {'i': 'init', 'v': 'version', 'g': 'git', 'u': 'utils', 'h':'help'}

#    commands = ['bump', 'info', 'set', 'tag', 'unbumped', 'changed', 'file', 'init','help']
    commands = {'b':'bump', 'i':'info', 's':'set', 't':'tag', 'u':'unbumped', 'c':'changed', 'f':'file', 'in':'init','h':'help'}
    if len(args.command) == 0:
        args.command.append('help')

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)

    if command == 'bump':
        args_utils.count(1, len(args.command), msg="version bump requires; major/minor/patch/dev")
        bump = args.command.pop(0)
        args_utils.valid_command(bump, ['major', 'minor', 'patch', 'dev', 'rc'])
        version_utils.bump_version(bump)
    elif command == 'info':
        version_utils.info()
    elif command == 'file':
        print(version_utils.find_version_file('version.json'))
    elif command == 'init':
        if not os.path.isfile('version.json'):
            version_utils.write_version_json_file()
    elif command == 'set':
        args_utils.count(1, len(args.command), msg="version set requires a version string (major.minor.patch)")
        version = args.command.pop(0)
        version_utils.set(version)
    elif command == 'tag':
        version_utils.tag()
    elif command == 'unbumped':
        res = run_utils.launch_cmd(cmd='git log --pretty=format:"%ar, %s"')
        stdout = res.stdout.decode("utf-8")
        print("Commits since last bump")
        print("=======================")
        for l in stdout.split("\n"):
            if "version bump" in l:
                break
            print(l)
    elif command == 'changed':
        ts = version_utils.changed()
        ts = datetime_utils.to_string(ts)
        ts.replace(r'\.\d+', '')
        print(f"Version was last updated at {ts}")
    else:
        print("version sub-commands: {}".format(", ".join(commands.values())))
        sys.exit()


def git_command(args) -> None:
    commands = {'b':'bump', 't':'tag', 'u':'unbumped', 'bs':'bumps', 'h':'help'}

    if len(args.command) == 0:
        args.command.append('help')

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)

    if command == 'bump':
        args_utils.count(1, len(args.command), msg="version bump requires; major/minor/patch/dev/rc")
        bump = args.command.pop(0)
        args_utils.valid_command(bump, ['major', 'minor', 'patch', 'dev', 'rc'])
        version_utils.bump_version(bump)

        version_str = version_utils.as_string()
        version_file = version_utils.find_version_file('version.json')
        git_utils.commit_and_push(f"{bump} version bump to: {version_str}", version_file)
    elif command == 'tag':
        version_utils.tag()
    elif command == 'unbumped':
        git_utils.unbumped()
    elif command == 'bumps':
        length = args_utils.get_or_default(args.command, 10)
        git_utils.bump_history(int(length))
    else:
        print("git sub-commands: {}".format(", ".join(commands.values())))
        sys.exit()



def release_command(args) -> None:
    commands = {'i':'info', 'pr': 'prep', 'pu': 'push', 'h':'help'}
    if len(args.command) == 0:
        args.command.append('help')

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)

    if command == 'info':
        version = None
        if len(args.command) == 1:
            version = args.command.pop(0)
        version_utils.release_info(version)
    elif command == 'prep':
        version_utils.release_prep()
    elif command == 'push':
        version_utils.release_push()
    else:
        print("version sub-commands: {}".format(", ".join(commands.values())))
        sys.exit()


def init_cmds(args) -> None:

    commands ={'p':'python', 'g':'go', 'a':'ansible-role', 'h':'help'}

    if len(args.command) == 0:
        args.command.append('help')

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)

    if command == 'python':
         version_utils.init_python_env()
    elif command == 'go':
        version_utils.write_version_json_file()
        os_utils.mkdirs(['cmd','pkg','internal'])
    elif command == 'ansible-role':
        version_utils.write_version_json_file()
        os_utils.mkdirs(['defaults' 'handlers' 'meta' 'tasks' 'templates' 'vars'])
    else:
        print("init sub-commands: {}".format(", ".join(commands.values())))
        sys.exit()
        

def utils_cmds(args) -> None:
    commands = {'u':'uuid', 'us':'uuids', 'p':'passwd', 'ps': 'passwds', 'h':'help'}
    if len(args.command) == 0:
        args.command.append('help')

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)

    if command == 'uuid':
        length = 16
        if len(args.command):
            length = int(args.command.pop(0))
        print(crypt_utils.create_uuid(length))
    elif command == 'uuids':
        number = 5
        length = 16
        if len(args.command):
            length = int(args.command.pop(0))
        if len(args.command):
            number = int(args.command.pop(0))
        for _ in range(0, number):
            print(crypt_utils.create_uuid(length))
    elif command == 'passwd':
        length = 15
        use_special_chars = False
        if len(args.command):
            use_special_chars = True
        if len(args.command):
            length = int(args.command.pop(0))
        print(crypt_utils.create_password(length, use_special_chars))

    elif command == 'passwds':
        number = 5
        length = 15
        use_special_chars = False
        if len(args.command):
            length = int(args.command.pop(0))
        if len(args.command):
            number = int(args.command.pop(0))
        if len(args.command):
            use_special_chars = True

        for _ in range(0, number):
            print(crypt_utils.create_password(length, use_special_chars))
    else:
        print("utils sub-commands: {}".format(", ".join(commands.values())))
        sys.exit()


def main():
    parser = argparse.ArgumentParser(description="kbr dev utils (version: {version})".format(version=version))
    commands = {'i': 'init', 'v': 'version', 'g': 'git', 'u': 'utils', 'h':'help'}
    parser.add_argument('command', nargs='+', help="{}".format(",".join(commands.values())))

    args = parser.parse_args()
    # hardcoded for now.

    command = args.command.pop(0)
    if command in commands:
        command = commands[ command ]

    if command == 'init':
        init_cmds( args )
    elif command == 'version':
        version_command(args)
    elif command == 'git':
        git_command(args)
    #    elif command == 'release':
    #        release_command(args)
    elif command == 'utils':
        utils_cmds(args)
    else:
        if command != 'help':
            print(f"Unknown command: {command}.")

        parser.print_help()
        sys.exit(1)

if __name__ == "__main__":
    main()
