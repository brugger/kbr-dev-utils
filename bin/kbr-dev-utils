#!/usr/bin/env python3
#
#
#
#
# Kim Brugger (03 Apr 2019), contact: kim@brugger.dk

import sys
import os
import pprint


pp = pprint.PrettyPrinter(indent=4)
import argparse
import tabulate

sys.path.append(".")
#sys.path.append("..")

import kbr.args_utils as args_utils
import kbr.version_utils as version_utils
#import kbr.string_utils as string_utils
import kbr.crypt_utils as crypt_utils
import kbr.run_utils   as run_utils
import kbr.datetime_utils as datetime_utils
import kbr.os_utils as os_utils
import kbr.git_utils as git_utils
import kbr.config_utils as config_utils
import kbr.dbase.postgres_utils as postgres_utils

version = version_utils.as_string('kbr')


def version_command(args) -> None:
#    commands = {'i': 'init', 'v': 'version', 'g': 'git', 'u': 'utils', 'h':'help'}

#    commands = ['bump', 'info', 'set', 'tag', 'unbumped', 'changed', 'file', 'init','help']
    commands = {'b':'bump', 'mi':'minor-rc', 'ma':'major-rc', 'r': 'release-rc','i':'info', 's':'set', 't':'tag', 'u':'unbumped', 'c':'changed', 'f':'file', 'in':'init','h':'help'}
    if len(args.command) == 0:
        args.command.append('help')

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)

    if command == 'bump':
        args_utils.count(1, len(args.command), msg="version bump requires; major/minor/patch/dev/rc")
        bump = args.command.pop(0)
        args_utils.valid_command(bump, ['major', 'minor', 'patch', 'dev', 'rc'])
        version_utils.bump_version(bump)
    elif command == 'minor-rc':
        version_utils.bump_version('minor')
        version_utils.bump_version('rc')
    elif command == 'major-rc':
        version_utils.bump_version('major')
        version_utils.bump_version('rc')
    elif command == 'release-rc':
        version_utils.remove_rc()
        version_utils.info()
    elif command == 'file':
        print(version_utils.find_version_file('version.json'))
    elif command == 'info':
        version_file = args_utils.get_or_default(args.command, None)
        if os.path.exists(f"{version_file}/version.json"):
            version_file = f"{version_file}/version.json"
        print(version_utils.as_string(version_file=version_file))
    elif command == 'init':
        if not os.path.isfile('version.json'):
            version_utils.write_version_json_file()
    elif command == 'set':
        args_utils.count(1, len(args.command), msg="version set requires a version string (major.minor.patch)")
        version = args.command.pop(0)
        version_utils.set(version)
    elif command == 'tag':
        version_utils.tag()
    elif command == 'unbumped':
        res = run_utils.launch_cmd(cmd='git log --pretty=format:"%ar, %s"')
        stdout = res.stdout.decode("utf-8")
        print("Commits since last bump")
        print("=======================")
        for l in stdout.split("\n"):
            if "version bump" in l:
                break
            print(l)
    elif command == 'changed':
        ts = version_utils.changed()
        ts = datetime_utils.to_string(ts)
        ts.replace(r'\.\d+', '')
        print(f"Version was last updated at {ts}")
    else:
        print("version sub-commands: {}".format(args_utils.pretty_commands(commands)))
        sys.exit()


def git_command(args) -> None:
    commands = {'b':'bump', 't':'tag', 'u':'unbumped', 'bs':'bumps', 'mi':'minor-rc', 'ma':'major-rc', 'r': 'release-rc', 'h':'help'}

    if len(args.command) == 0:
        args.command.append('help')

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)

    if command == 'bump':
        args_utils.count(1, len(args.command), msg="version bump requires; major/minor/patch/dev/rc")
        bump = args.command.pop(0)
        args_utils.valid_command(bump, ['major', 'minor', 'patch', 'dev', 'rc'])
        version_utils.bump_version(bump)

        version_str = version_utils.as_string()
        version_file = version_utils.find_version_file('version.json')
        git_utils.commit_and_push(f"{bump} version bump to: {version_str}", version_file)
    elif command == 'minor-rc':
        version_utils.bump_version('minor')
        version_utils.bump_version('rc')
        version_str = version_utils.as_string()
        version_file = version_utils.find_version_file('version.json')
        git_utils.commit_and_push(f"minor_rc version bump to: {version_str}", version_file)
    elif command == 'major-rc':
        version_utils.bump_version('major')
        version_utils.bump_version('rc')
        version_str = version_utils.as_string()
        version_file = version_utils.find_version_file('version.json')
        git_utils.commit_and_push(f"major_rc version bump to: {version_str}", version_file)
    elif command == 'release-rc':
        version_utils.remove_rc()
        version_str = version_utils.as_string()
        version_file = version_utils.find_version_file('version.json')
        git_utils.commit_and_push(f"RC released version changed to: {version_str}", version_file)
    elif command == 'tag':
        version_utils.tag()
    elif command == 'unbumped':
        git_utils.unbumped()
    elif command == 'bumps':
        length = args_utils.get_or_default(args.command, 10)
        git_utils.bump_history(int(length))
    else:
        print("git sub-commands: {}".format(args_utils.pretty_commands(commands)))
        sys.exit()



def release_command(args) -> None:
    commands = {'i':'info', 'pr': 'prep', 'pu': 'push', 'h':'help'}
    if len(args.command) == 0:
        args.command.append('help')

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)

    if command == 'info':
        version = None
        if len(args.command) == 1:
            version = args.command.pop(0)
        version_utils.release_info(version)
    elif command == 'prep':
        version_utils.release_prep()
    elif command == 'push':
        version_utils.release_push()
    else:
        print("version sub-commands: {}".format(", ".join(commands.values())))
        sys.exit()


def init_cmds(args) -> None:

    commands ={'p':'python', 'g':'go', 'a':'ansible-role', 'h':'help'}

    if len(args.command) == 0:
        args.command.append('help')

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)

    if command == 'python':
         version_utils.init_python_env()
    elif command == 'go':
        version_utils.write_version_json_file()
        os_utils.mkdirs(['cmd','pkg','internal'])
    elif command == 'ansible-role':
        version_utils.write_version_json_file()
        os_utils.mkdirs(['defaults' 'handlers' 'meta' 'tasks' 'templates' 'vars'])
    else:
        print("init sub-commands: {}".format(args_utils.pretty_commands(commands)))
        sys.exit()
        

def utils_cmds(args) -> None:
    commands = {'u':'uuid', 'us':'uuids', 'p':'passwd', 'ps': 'passwds', 'h':'help'}
    if len(args.command) == 0:
        args.command.append('help')

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)

    if command == 'uuid':
        length = 16
        if len(args.command):
            length = int(args.command.pop(0))
        print(crypt_utils.create_uuid(length))
    elif command == 'uuids':
        number = 5
        length = 16
        if len(args.command):
            length = int(args.command.pop(0))
        if len(args.command):
            number = int(args.command.pop(0))
        for _ in range(0, number):
            print(crypt_utils.create_uuid(length))
    elif command == 'passwd':
        length = 15
        use_special_chars = False
        if len(args.command):
            use_special_chars = True
        if len(args.command):
            length = int(args.command.pop(0))
        print(crypt_utils.create_password(length, use_special_chars))

    elif command == 'passwds':
        number = 5
        length = 15
        use_special_chars = False
        if len(args.command):
            length = int(args.command.pop(0))
        if len(args.command):
            number = int(args.command.pop(0))
        if len(args.command):
            use_special_chars = True

        for _ in range(0, number):
            print(crypt_utils.create_password(length, use_special_chars))
    else:
        print("utils sub-commands: {}".format(args_utils.pretty_commands(commands)))
        sys.exit()

def read_json_config() -> dict:
    config_file = os.getenv("HOME") + "/.kbr_dev_utils.json"

    try:

        config = config_utils.readin_config_file(config_file)
        return config
    except Exception as e :
#        print (e)
        print("Error:")
        print(f"{config_file}, does not exit\n")        
        print("Howto create:\nsudo -u postgres psql")
        print("CREATE USER <ADMIN> WITH SUPERUSER PASSWORD '<PASSWORD>';")
        print('{"admin_dbase": "postgresql://<ADMIN>:<PASSWORD>@localhost/"}')
        sys.exit()


def postgres_cmds(args) -> None:
    commands = {'d':'database', 'u':'user', 't':'table', 'b':'bootstrap', 'h':'help'}

    if len(args.command) == 0:
        args.command.append('help')

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)

    if command == 'user':
        postgres_user_cmds(args)
    elif command == 'database':
        postgres_database_cmds(args)
    elif command == 'table':
        postgres_table_cmds(args)
    elif command == 'bootstrap':
            api_config_file = args_utils.get_or_fail(args.command, "Missing config filename")
            if api_config_file in ['h', 'help']:
                print("kbr-dev-utils postgres bootstrap [api-config-file] <schema files>")

            config = read_json_config()
            db = postgres_utils.DB(config['admin_dbase']+"postgres")

            api_config = config_utils.readin_config_file(api_config_file)
            print(api_config)
            api_db_url = db.uri_split(api_config['database'])

            dbname = api_db_url['db']
            username = api_db_url['user']
            password = api_db_url['pass']

            if db.user_get(username) is not None:
                print(f"user {username} already exists")
            else:
                db.user_create(username, password)

            if db.database_exists(dbname):
                print(f"database {dbname} already exists")
            else:
                db.database_create(dbname, username)

            db.database_change_owner(dbname, username)
            
            for schema in args.command:
                db = postgres_utils.DB(api_config['database'])
                print(f'creating tables from {schema}')
                db.tables_create(schema)

    else:
        print("postgres : {}".format(args_utils.pretty_commands(commands)))
        sys.exit()




def postgres_user_cmds(args) -> None:
    commands = {'c':'create', 'd':'delete', 'l':'list', 'h':'help'}

    if len(args.command) == 0:
        args.command.append('help')

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)

    config = read_json_config()
    db = postgres_utils.DB(config['admin_dbase']+"postgres")

    if command == 'create':
        username = args_utils.get_or_fail(args.command, "Missing username")
        password = args_utils.get_or_fail(args.command, "Missing password")

        if db.user_get(username) is not None:
            print(f"{username} already exists")
        else:
            db.user_create(username, password)

    elif command == 'delete':
        username = args_utils.get_or_fail(args.command, "Missing username")
        if db.user_get(username) is None:
            print(f"{username} don't exists")
        else:
            db.user_delete(username)

    elif command == 'list':
            users = db.user_list()
            print(tabulate.tabulate(users, headers={'rolname':'name', 'rolsuper':'admin'}))

    else:
        print("postgres user: {}".format(args_utils.pretty_commands(commands)))
        sys.exit()



def postgres_database_cmds(args) -> None:
    commands = {'c':'create', 'd':'delete', 'l':'list', 'o':'set-owner','h':'help'}

    if len(args.command) == 0:
        args.command.append('help')

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)

    config = read_json_config()
    db = postgres_utils.DB(config['admin_dbase']+"postgres")
    if command == 'create':
        dbname = args_utils.get_or_fail(args.command, "Missing database name")
        username = args_utils.get_or_default(args.command, None)
        if db.database_exists(dbname):
            print(f"{dbname} already exists")
        else:
            db.database_create(dbname, username)

    elif command == 'delete':
        dbname = args_utils.get_or_fail(args.command, "Missing database name")
        if db.database_exists(dbname):
            db.database_delete(dbname)
        else:
            print( f"{dbname} does not exist" )

    elif command == 'list':
            dbs = db.database_list()
            print(tabulate.tabulate(dbs, headers={'datname':'database name'}))

    elif command == 'set-owner':
            dbname = args_utils.get_or_fail(args.command, "Missing database name")
            new_owner = args_utils.get_or_fail(args.command, "Missing user name")
            db.database_change_owner(dbname, new_owner)

    else:
        print("postgres user: {}".format(args_utils.pretty_commands(commands)))
        sys.exit()


def postgres_table_cmds(args) -> None:
    commands = {'c':'create', 'd':'delete', 'l':'list', 's':'schema', 'o':'set-owner', 'h':'help'}

    if len(args.command) == 0 or 'help' in args:
        print("postgres table: {}".format(args_utils.pretty_commands(commands)))
        print("Help")
        print("------")
        print("table create [database] [schema-file] <owner>")
        print("table delete [database] (all tables!)")
        print("table set-owner [database] [old-owner] [new-owner]")
        print("table schema [database] [table-name]")
        sys.exit()

    command = args.command.pop(0)
    command = args_utils.valid_command(command, commands)

    dbname = args_utils.get_or_fail(args.command, "Missing database name")
    config = read_json_config()
    db = postgres_utils.DB(config['admin_dbase']+dbname)

    if command == 'create':
        schema = args_utils.get_or_fail(args.command, "Missing file with sql-schema")
        owner  = args_utils.get_or_default(args.command, None)
        db.tables_create(schema)

        if owner is not None:
            uri_detail = db.uri_split()
            db.tables_change_owner(uri_detail['user'], owner)

    elif command == 'list':
        tables = db.tables_list()
        print(tabulate.tabulate(tables, headers={}))

    elif command == 'delete':
        db.tables_delete()

    elif command == 'set-owner':
            old_owner = args_utils.get_or_fail(args.command, "Missing old-owner name")
            new_owner = args_utils.get_or_fail(args.command, "Missing new-owner name")
            db.tables_change_owner(old_owner, new_owner)

    elif command == 'schema':
        tblname = args_utils.get_or_fail(args.command, "Missing table name")
        tbl = db.table_details(tblname)
        print(f"Table: {dbname}.{tblname}")
        print(tabulate.tabulate(tbl, headers={'column_name':'name', 'data_type':'type'}))




def main():
    parser = argparse.ArgumentParser(description="kbr dev utils (version: {version})".format(version=version))
    commands = {'i': 'init', 'v': 'version', 'g': 'git', 'u': 'utils', 'pg': 'postgres', 'h':'help'}
    parser.add_argument('command', nargs='+', help="{}".format(",".join(commands.values())))

    args = parser.parse_args()
    # hardcoded for now.

    command = args.command.pop(0)
    if command in commands:
        command = commands[ command ]

    if command == 'init':
        init_cmds( args )
    elif command == 'version':
        version_command(args)
    elif command == 'git':
        git_command(args)
    #    elif command == 'release':
    #        release_command(args)
    elif command == 'utils':
        utils_cmds(args)
    elif command == 'postgres':
        postgres_cmds(args)
    else:
        if command != 'help':
            print(f"Unknown command: {command}.")


        parser.print_help()
        print("\ncommands : {}".format(args_utils.pretty_commands(commands)))
        sys.exit(1)

if __name__ == "__main__":
    main()
