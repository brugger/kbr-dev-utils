
class {{tblname_camelcase}}DetailHandler ( tornado.BaseHandler ):

    def endpoint(self):
        return("/{{tblname}}/[id]")

    def get(self, id:str):
        {{tblname}}  = db.{{tblname}}(id=id)
        if {{tblname}} is None:
            self.send_response_404()

        return self.send_response( data={{tblname}})

    def patch(self, id:str):
        {{tblname}} = db.{{tblname}}(id=id)
        if {{tblname}} is None:
            self.send_response_404()

        values = self.post_values()
        # Check and change here!
        self.valid_arguments(values, [{{table_fields|join(", ")}}])
        values['id'] = id

        db.{{tblname}}_update(**values)
        return self.send_response_200( )

    def delete(self, id:str):
        try:
            db.{{tblname}}_delete( id=id )
            return self.send_response_200()
        except:
            return self.send_response_400()

    def options(self, id:str):
        self.allow_options()


class {{tblname_camelcase}}sListHandler( tornado.BaseHandler):
    def endpoint(self):
        return "/{{tblname}}s/"

    def post(self):
        values = self.post_values()
        # check and change here
        self.require_arguments(values, [{{table_required_fields|join(', ')}}])
        self.valid_arguments(values, [{{table_fields|join(', ')}}])
        try:
            db.{{tblname}}_create(**values)
            self.send_response_200()
        except Exception as e:
            logger.error(f"Request export tracking error {e}")
            self.send_response_404()

    def options(self):
        self.allow_options()

    def get(self):
        filter = self.arguments()
        # check and change here
        self.valid_arguments(filter, [{{table_fields|join(', ')}}])
        return self.send_response( db.{{tblname}}s( **filter ))

